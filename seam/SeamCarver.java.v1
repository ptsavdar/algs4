package seam;

import edu.princeton.cs.algs4.Picture;
import edu.princeton.cs.algs4.Stack;

import java.awt.Color;

public class SeamCarver {
    private Picture picture;
    private int w,h;

    public SeamCarver(Picture picture) {
        if (picture == null) throw new IllegalArgumentException();
        this.picture = new Picture(picture);
        w = picture.width();
        h = picture.height();
    }

    public Picture picture() {
        return new Picture(this.picture);
    }

    public int width() {
        return w;
    }

    public int height() {
        return h;
    }

    public double energy(int x, int y) {
        if (x < 0 || y < 0 || x >= w || y >= h) throw new IllegalArgumentException();
        if (x == 0 || y == 0 || x == w - 1 || y == h - 1) return 1000;

        return Math.sqrt(
            squareDelta(picture.get(x, y - 1), picture.get(x, y + 1)) +
            squareDelta(picture.get(x - 1, y), picture.get(x + 1, y))
        );
    }

    public int[] findHorizontalSeam() {
        int[] seam = new int[w];
        int[] edges = asp(false);

        int idx = w - 1;
        for (int i = edges[edges.length - 1]; i != 0; i = edges[i]) {
            seam[idx] = Math.floorDiv(i - 1,  w);
            idx--;
        }

        return seam;
    }

    public int[] findVerticalSeam() {
        int[] seam = new int[h];
        int[] edges = asp(true);

        int idx = h - 1;
        for (int i = edges[edges.length - 1]; i != 0; i = edges[i]) {
            seam[idx] = (i - 1) % w;
            idx--;
        }

        return seam;
    }

    private int[] asp(boolean isVertical) {
        Iterable<Integer> order = topological(isVertical);
        double[] distTo = new double[w * h + 2];
        int[] edgeTo = new int[w * h + 2];
        double[] energy = new double[w * h + 2];
        for (int i = 0; i < distTo.length; i++) {
            distTo[i] = Double.POSITIVE_INFINITY;
            if (i == 0 || i == distTo.length - 1) energy[i] = 0;
            else energy[i] = energy((i - 1) % w, Math.floorDiv(i - 1, w));
        }
        distTo[0] = 0;
        for (int v : order) {
            for (int w : adj(v, isVertical)) {
                if (distTo[w] > distTo[v] + energy[w]) {
                    distTo[w] = distTo[v] + energy[w];
                    edgeTo[w] = v;
                }
            }
        }

        return edgeTo;
    }

    private Iterable<Integer> topological(boolean isVertical) {
        Stack<Integer> postorder = new Stack<>();
        int dim = w * h + 2;
        boolean[] marked = new boolean[dim];
        for (int i = 0; i < dim; i++) {
            if (!marked[i]) dfs(i, isVertical, postorder, marked);
        }

        return postorder;
    }

    // run DFS in image
    private void dfs(int v, boolean isVertical, Stack<Integer> postorder, boolean[] marked) {
        marked[v] = true;
        Iterable<Integer> adj = adj(v, isVertical);
        for (int i : adj) {
            if (!marked[i]) dfs(i, isVertical, postorder, marked);
        }
        postorder.push(v);
    }

    // Find all adjacent vertices / pixels
    private Iterable<Integer> adj(int v, boolean isVertical) {
        // target vertex index
        int t = w * h + 1;
        int col = (v - 1) % w, row = Math.floorDiv(v - 1, w);
        Stack<Integer> adj = new Stack<>();
        // If source vertex, then add all first row / col pixels / vertices
        if (v == 0) {
            int dim = isVertical ? w : h;
            for (int i = 0; i < dim; i++) {
                int vn = isVertical ? i + 1 : i * w + 1;
                adj.push(vn);
            }
        }
        // If last col / row then add target vertex
        else if ((col == w - 1 && !isVertical) || (row == h - 1 && isVertical)) {
            adj.push(t);
        }
        // Else if vertex not target
        else if (v != t){
            if (isVertical) {
                if (col > 0) adj.push(v + w - 1);
                adj.push(v + w);
                if (col < w - 2) adj.push(v + w + 1);
            } else {
                if (row > 0) adj.push(v - w + 1);
                adj.push(v + 1);
                if (row < h - 2) adj.push(v + w + 1);
            }
        }

        return adj;
    }

    public void removeHorizontalSeam(int[] seam) {
        checkSeam(seam, w, h);
        Picture newPic = new Picture(w, h - 1);
        for (int i = 0; i < w; i++) {
            int k = 0;
            for (int j = 0; j < h; j++) {
                if (j == seam[i]) continue;
                newPic.setRGB(i, k, picture.getRGB(i, j));
                k++;
            }
        }
        h--;
        picture = newPic;
    }

    public void removeVerticalSeam(int[] seam) {
        checkSeam(seam, h, w);
        Picture newPic = new Picture(w - 1, h);
        for (int i = 0; i < h; i++) {
            int k = 0;
            for (int j = 0; j < w; j++) {
                if (j == seam[i]) continue;
                newPic.setRGB(k, i, picture.getRGB(j, i));
                k++;
            }
        }
        w--;
        picture = newPic;
    }

    private void checkSeam(int [] seam, int length, int maxValue) {
        if (seam == null || maxValue < 2 || seam.length != length) throw new IllegalArgumentException();

        for(int i = 0; i < seam.length; i++) {
            int si = seam[i];
            if (si < 0 || si >= maxValue) throw new IllegalArgumentException();
            if (i > 0 && Math.abs(si - seam[i - 1]) > 1) throw new IllegalArgumentException();
        }
    }

    private double squareDelta(Color c1, Color c2) {
        return
            Math.pow(c1.getRed() - c2.getRed(), 2) +
            Math.pow(c1.getBlue() - c2.getBlue(), 2) +
            Math.pow(c1.getGreen() - c2.getGreen(), 2);
    }


}
